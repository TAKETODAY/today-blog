### 异常处理是每个Web应用几乎不可少的一步

> 核心处理器
```java
@RestControllerAdvice
public class ApplicationExceptionHandler {

  private static final Logger log = LoggerFactory.getLogger(ApplicationExceptionHandler.class);

  public static final ErrorMessage needLogin = ErrorMessage.failed("需要登录");
  public static final ErrorMessage accessForbidden = ErrorMessage.failed("权限不足");
  public static final ErrorMessage argsErrorMessage = ErrorMessage.failed("参数错误");
  public static final ErrorMessage sizeExceeded = ErrorMessage.failed("上传文件大小超出限制");
  public static final ErrorMessage methodNotSupported = ErrorMessage.failed("请求方式不支持");
  public static final ErrorMessage internalServerError = ErrorMessage.failed("服务器内部异常");
  public static final ErrorMessage notWritableError = ErrorMessage.failed("数据无法正常返回到客户端");

  @ResponseStatus(HttpStatus.UNAUTHORIZED)
  @ExceptionHandler(UnauthorizedException.class)
  public ErrorMessage unauthorized() {
    return needLogin;
  }

  @ResponseStatus(HttpStatus.FORBIDDEN)
  @ExceptionHandler(AccessForbiddenException.class)
  public ErrorMessage accessForbidden() {
    return accessForbidden;
  }

  @ResponseStatus(HttpStatus.NOT_FOUND)
  @ExceptionHandler({ NotFoundException.class })
  public ErrorMessage notFound(NotFoundException exceededException) {
    return ErrorMessage.failed(exceededException.getMessage());
  }

  @ExceptionHandler(InternalServerException.class)
  @ResponseStatus(HttpStatus.INTERNAL_SERVER_ERROR)
  public ErrorMessage internal(InternalServerException internal) {
    log.error("服务器内部错误", internal);
    return ErrorMessage.failed(internal.getMessage());
  }

  @ResponseStatus(HttpStatus.BAD_REQUEST)
  @ExceptionHandler({ MaxUploadSizeExceededException.class })
  public ErrorMessage badRequest() {
    return sizeExceeded;
  }

  @ResponseStatus(HttpStatus.BAD_REQUEST)
  @ExceptionHandler(HttpRequestMethodNotSupportedException.class)
  public ErrorMessage methodNotSupported() {
    return methodNotSupported;
  }

  @ExceptionHandler
  @ResponseStatus(HttpStatus.INTERNAL_SERVER_ERROR)
  public ErrorMessage error(Exception exception) {
    log.error("An Exception occurred", exception);
    if (exception instanceof SQLException) {
      return internalServerError;
    }
    if (exception instanceof HttpMessageNotWritableException) {
      return notWritableError;
    }
    if (exception instanceof TransactionSystemException) {
      return ErrorMessage.failed("数据库出错");
    }
    return ErrorMessage.failed(exception.getMessage());
  }

  /**
   * 不记录日志
   */
  @ResponseStatus(HttpStatus.BAD_REQUEST)
  @ExceptionHandler({
          ApplicationException.class,
          IllegalArgumentException.class,
  })
  public ErrorMessage badRequest(Exception exception) {
    return ErrorMessage.failed(exception.getMessage());
  }

  @ResponseStatus(HttpStatus.BAD_REQUEST)
  @ExceptionHandler(MethodArgumentTypeMismatchException.class)
  public ErrorMessage typeMismatch(MethodArgumentTypeMismatchException mismatch) {
    return ErrorMessage.failed("参数'" + mismatch.getName() + "'不能转换到对应类型");
  }

  @ResponseStatus(HttpStatus.BAD_REQUEST)
  @ExceptionHandler(MissingServletRequestParameterException.class)
  public ErrorMessage parameterError(MissingServletRequestParameterException e) {
    return ErrorMessage.failed("缺少参数'" + e.getParameterName() + "'");
  }

  @ResponseStatus(HttpStatus.BAD_REQUEST)
  @ExceptionHandler({
          MultipartException.class,
          HttpMessageNotReadableException.class,
          HttpMediaTypeNotSupportedException.class
  })
  public ErrorMessage messageNotReadable() {
    return argsErrorMessage;
  }

  @ResponseStatus(HttpStatus.BAD_REQUEST)
  @ExceptionHandler({ BindException.class, MethodArgumentNotValidException.class })
  public Result validExceptionHandler(Exception e) {

    final BindingResult result;
    if (e instanceof MethodArgumentNotValidException) {
      result = ((MethodArgumentNotValidException) e).getBindingResult();
    }
    else if (e instanceof BindException) {
      result = (BindingResult) e;
    }
    else {
      return ErrorMessage.failed();
    }
    final List<ObjectError> allErrors = result.getAllErrors();
    final Map<String, String> model = new HashMap<>(16);

    for (ObjectError error : allErrors) {
      if (error instanceof FieldError) {
        final FieldError fieldError = (FieldError) error;
        if (fieldError.contains(TypeMismatchException.class)) { // 类型不正确
          return ErrorMessage.failed("参数'" + fieldError.getField() + "'不能转换到对应类型");
        }
        final String field = fieldError.getField();
        final String defaultMessage = error.getDefaultMessage();
        model.put(field, defaultMessage);
        // log.error("[{}] -> [{}]", field, defaultMessage);
      }
    }
    return ValidationError.failed(model);
  }

  @ExceptionHandler(NullPointerException.class)
  @ResponseStatus(HttpStatus.INTERNAL_SERVER_ERROR)
  public Json nullPointer(NullPointerException exception) {
    final StackTraceElement[] stackTrace = exception.getStackTrace();
    if (ObjectUtils.isNotEmpty(stackTrace)) {
      return Json.failed("空指针", stackTrace[0]);
    }
    return Json.failed("空指针", "暂无堆栈信息");
  }

  @ExceptionHandler(DataAccessException.class)
  @ResponseStatus(HttpStatus.INTERNAL_SERVER_ERROR)
  public ErrorMessage dataAccessException(DataAccessException accessException) {
    final String message = getDataAccessMessage(accessException.getCause());
    log.error(message, accessException);
    return ErrorMessage.failed(message);
  }

  String getDataAccessMessage(Throwable cause) {
    if (cause instanceof ElasticsearchException) {
      return "索引数据库出错";
    }
    return "数据库出错";
  }

  @ResponseStatus(HttpStatus.INTERNAL_SERVER_ERROR)
  @ExceptionHandler(DataAccessResourceFailureException.class)
  public ErrorMessage dataAccessException(DataAccessResourceFailureException accessException) {
    log.error("数据库连接出错", accessException);
    return ErrorMessage.failed("数据库连接出错");
  }
}

```

## 使用方式：

### 自定义异常类

```java
public class ApplicationException extends RuntimeException {
  private static final long serialVersionUID = 1L;

  public ApplicationException() {
    super();
  }

  public ApplicationException(String message) {
    super(message);
  }

  public ApplicationException(String message, Throwable cause) {
    super(message, cause);
  }

  public ApplicationException(Throwable cause) {
    super(cause);
  }

  protected ApplicationException(String message, Throwable cause,
                                 boolean enableSuppression,
                                 boolean writableStackTrace) {
    super(message, cause, enableSuppression, writableStackTrace);
  }

  public static ApplicationException failed(String message) {
    return new ApplicationException(message);
  }

  public static ApplicationException failed() {
    return new ApplicationException("操作失败");
  }

  public static void notNull(Object obj) {
    notNull(obj, "对象不存在");
  }

  public static void notNull(Object obj, String message) {
    if (obj == null) {
      throw new ApplicationException(message);
    }
  }

  public static void notNull(Object obj, Supplier<String> supplier) {
    if (obj == null) {
      throw new ApplicationException(supplier.get());
    }
  }

}
```

### Controller 层直接抛出

```java
@PostMapping
@ApiOperation("登录")
public Json login(@RequestBody @Valid LoginForm form, HttpSession session) {
  final User user = userService.getUserByName(form.userName);
  ApplicationException.notNull(user, "该用户名所对应的用户不存在");

  final String encodedPassword = HashUtils.getEncodedPassword(form.password);
  if (Objects.equals(encodedPassword, user.getPassword())) {
	...
  }
}
```
